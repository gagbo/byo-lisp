; vim: ft=lisp

;;;
;;; Test cases for native functions
;;;

; Helper function
(fun {unpack f l} {
  eval (join (list f) l)
})

(fun {test name f result & args}
     {cond (== (unpack f args) result)
         {show name " : Ok"}
         {show name " : Not Ok -> Got " (unpack f args) ", Expected " result}})

;; Arithmetic tests
(show "Arithmetic tests\n============================\n")
(test "Addition of 2 numbers             " + 2 1 1)
(test "Addition of 2 decimal numbers     " + -0.125 -1.125 1)
(test "Addition of 3 numbers             " + 15 10 2 3)
(test "Substraction of 2 numbers         " - 0 1 1)
(test "Substraction of 2 decimal numbers " - -2.125 -1.125 1)
(test "Substraction of 3 numbers         " - 5 10 2 3)
(test "Division                          " / 2.5 5 2)
(test "Multiplication                    " * 22 11 2)
(test "Multiplication of negative numbers" * -12 4 -3)
(test "Modulo                            " % 2 8 3)
(test "Modulo with 3 numbers             " % 1 10 7 2)
(test "Floor                             " floor 10 10.2)
(test "Floor with negative               " floor -11 -10.2)
(show "\n\n\n")

;; List tests
(show "List tests\n============================\n")
(test "Head with arguments " head {2} {2 4 1 6})
(test "Head on nil         " head nil nil)
(test "Tail with arguments " tail {4 1 6} {2 4 1 6})
(test "Tail on nil         " tail nil nil)
(test "Join 2 arguments    " join {2 3} {2} {3})
(test "Join 2 lists        " join {1 4 2 6} {1 4} {2 6})
(test "Join multiple lists " join {1 4 23 5 6 89 7} {1} {4 23} {5} {6 89 7})
(test "Eval                " eval 4 {4})
(test "List                " list {1 3 4} 1 3 4)
(test "Length of empty list" len 0 nil)
(test "Length of real list " len 3 { 2 3 5 })
(test "Length of singleton " len 1 {"hello"})
(test "Cons on nil         " cons {"test"} "test" nil)
(test "Cons on real list   " cons {"alpha" 2 "gamma"} "alpha" {2 "gamma"})
(test "Init on real list   " init {"alpha" 2} {"alpha" 2 "gamma"})
(show "\n\n\n")

;; Logical tests
(show "Logical tests\n============================\n")
(test "Equality  true" == t 1 1)
(test "Equality false" == f 1 0)
